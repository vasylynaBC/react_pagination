{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","items","total","perPage","currentPage","onPageChange","totalPages","Math","ceil","pages","Array","from","length","_","index","firstItem","lastItem","itemsArr","slice","className","cn","disabled","href","onClick","Number","map","page","active","handlePageChangeIfDifferent","item","to","numbers","n","push","getNumbers","App","useState","selectPages","setPages","countItems","setItems","selectElements","countPages","min","id","onChange","event","target","value","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"oNAYaA,EAA6B,SAAC,GAMpC,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAaC,KAAKC,KAAKN,EAAQC,GAC/BM,EAAQC,MAAMC,KAAK,CAAEC,OAAQN,IAAc,SAACO,EAAGC,GAAJ,OAAcA,EAAQ,KAEjEC,GAAaX,EAAc,GAAKD,EAChCa,EAAWZ,EAAcD,EAAUF,EAAMW,OAC3CR,EAAcD,EACdF,EAAMW,OAEJK,EAAWhB,EAAMiB,MAAMH,EAAWC,GAoBxC,OACE,qCACE,qBAAIG,UAAU,aAAd,UACE,oBACEA,UAAWC,IAAG,YAAa,CACzBC,SAA0B,IAAhBjB,IAFd,SAKE,mBACE,UAAQ,WACRe,UAAU,YACVG,KAAK,QACL,gBAA+B,IAAhBlB,EACfmB,QAzBV,WACsB,IAAhBnB,GACFC,EAAamB,OAAOpB,EAAc,KAkB9B,oBAWDK,EAAMgB,KAAI,SAAAC,GAAI,OACb,oBAEEP,UAAWC,IAAG,YAAa,CACzBO,OAAQD,IAAStB,IAHrB,SAME,mBACE,UAAQ,WACRe,UAAU,YACVG,KAAI,WAAMI,GACV,gBAA+B,IAAhBtB,EACfmB,QAAS,kBArCe,SAACG,GAC/BtB,IAAgBsB,GAClBrB,EAAaqB,GAmCUE,CAA4BF,IAL7C,SAOGA,KAZEA,MAiBT,oBACEP,UAAWC,IAAG,YAAa,CAAEC,SAAUjB,IAAgBE,IADzD,SAGE,mBACE,UAAQ,WACRa,UAAU,YACVG,KAAK,QACL,gBAAelB,IAAgBE,EAC/BiB,QAhEV,WACMnB,EAAcE,GAChBD,EAAamB,OAAOpB,EAAc,KAyD9B,uBAWJ,6BACGa,EACEQ,KAAI,SAACI,GAAD,OACH,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YClGb5B,ECLC,SAAoBU,EAAcmB,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIrB,EAAMqB,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,EDFKG,CAAW,EAAG,IACzBT,KAAI,SAAAO,GAAC,qBAAYA,MACd9B,EAAQD,EAAMW,OAEPuB,EAAgB,WAC3B,MAAgCC,mBAAiB,GAAjD,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA+BF,mBAAiB,GAAhD,mBAAOG,EAAP,KAAmBC,EAAnB,KAWMC,GAAkBJ,EAAc,GAAKE,EAAa,EAClDG,EAAanC,KAAKoC,IAAIN,EAAcE,EAAYrC,GAEtD,OACE,sBAAKiB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWkB,EADX,mBACiCI,EADjC,cACqDC,EADrD,eACsExC,EADtE,OAGA,sBAAKiB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRyB,GAAG,kBACHzB,UAAU,eACV0B,SAzBkB,SAACC,GAC3BN,EAAShB,OAAOsB,EAAMC,OAAOC,QAC7BV,EAAS,IAwBDU,MAAOT,EALT,UAOE,wBAAQS,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOC,QAAQ,kBAAkB9B,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACElB,MAAOA,EACPC,MAAOA,EACPC,QAASoC,EACTnC,YAAaiC,EACbhC,aAxCe,SAACqB,GACpBY,EAASZ,UEhBbwB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.ea7a8236.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\n// import { getNumbers } from '../../utils';\n\ninterface Props {\n  items:string[],\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: (value: number) => void;\n}\n\nexport const Pagination:React.FC<Props> = ({\n  items,\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const totalPages = Math.ceil(total / perPage);\n  const pages = Array.from({ length: totalPages }, (_, index) => index + 1);\n\n  const firstItem = (currentPage - 1) * perPage;\n  const lastItem = currentPage * perPage < items.length\n    ? currentPage * perPage\n    : items.length;\n\n  const itemsArr = items.slice(firstItem, lastItem);\n\n  function handleNextPage() {\n    if (currentPage < totalPages) {\n      onPageChange(Number(currentPage + 1));\n    }\n  }\n\n  function handlePrevPage() {\n    if (currentPage !== 1) {\n      onPageChange(Number(currentPage - 1));\n    }\n  }\n\n  const handlePageChangeIfDifferent = (page: number) => {\n    if (currentPage !== page) {\n      onPageChange(page);\n    }\n  };\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li\n          className={cn('page-item', {\n            disabled: currentPage === 1,\n          })}\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={currentPage === 1}\n            onClick={handlePrevPage}\n          >\n            «\n          </a>\n        </li>\n\n        {pages.map(page => (\n          <li\n            key={page}\n            className={cn('page-item', {\n              active: page === currentPage,\n            })}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${page}`}\n              aria-disabled={currentPage === 1}\n              onClick={() => handlePageChangeIfDifferent(page)}\n            >\n              {page}\n            </a>\n          </li>\n        ))}\n\n        <li\n          className={cn('page-item', { disabled: currentPage === totalPages })}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={currentPage === totalPages}\n            onClick={handleNextPage}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n      <ul>\n        {itemsArr\n          .map((item) => (\n            <li\n              key={item}\n              data-cy=\"item\"\n            >\n              {item}\n            </li>\n          ))}\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\nconst total = items.length;\n\nexport const App: React.FC = () => {\n  const [selectPages, setPages] = useState<number>(1);\n  const [countItems, setItems] = useState<number>(5);\n\n  const handlePerPageChange = (event:React.ChangeEvent<HTMLSelectElement>) => {\n    setItems(Number(event.target.value));\n    setPages(1);\n  };\n\n  const onPageChange = (page:number) => {\n    setPages(page);\n  };\n\n  const selectElements = (selectPages - 1) * countItems + 1;\n  const countPages = Math.min(selectPages * countItems, total);\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${selectPages} (items ${selectElements} - ${countPages} of ${total})`}\n      </p>\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            onChange={handlePerPageChange}\n            value={countItems}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        items={items}\n        total={total}\n        perPage={countItems}\n        currentPage={selectPages}\n        onPageChange={onPageChange}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}